generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(user)
  accounts      Account[]
  UserProfile   UserProfile?
  SellerProfile SellerProfile?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model UserProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  address     String?
  phoneNumber String?
  cart        Cart[]
  orders      Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SellerProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  storeName   String
  storeLogo   String?
  products    Product[]
  storeRating Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String      @id @default(cuid())
  userId    String
  user      UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Order {
  id     String      @id @default(cuid())
  userId String
  user   UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderItems  OrderItem[]
  totalAmount Float
  status      OrderStatus @default(PENDING)

  createdAt DateTime @default(now())
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float

  createdAt DateTime @default(now())
}

model Product {
  id       String        @id @default(cuid())
  sellerId String
  seller   SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  name           String
  description    String?
  price          Float
  stock          Int
  images         String[]
  category       String
  productRating  Int?
  productRatedBy Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]
  OrderItem OrderItem[]
}

enum UserRole {
  user
  seller
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}
